#Uran Onuk, 1004413253, uran.onuk@mail.utoronto.ca

SPLOIT1:
    In target1, there was a buffer overflow vulnerability, where an unchecked strcpy was used. 
    From gdb, I saw where the beginning of the buffer to overflow is and calculated how further away the rip is. (120B + 4B for the return address field) Initialized the injection string. Added NOPs after strcat ing the injection str up until byte 120. Appended the address of the beginning of the injection string for bytes 120-124 to overflow return address of the program.

SPLOIT2:
    In target2, if we can overwrite the value of len, we can avoid this security layer. From gdb, I found &buf, &i, &len and rips for lab_main and foo. Once the return address field is found, worked backwards to put NOPs at the beginning, then the shellcode, NOPs at the end and in between. I basically did not touch i inside the for loops, overwriting the value of len to 283, which was the size of the injection string.

SPLOIT3:
    The function bar() copies a string for up to 88B to targ, but targ' max size is 64B. We can overflow the return address by adding NOPs, shellcode, NOPs, and address of targ.

SPLOIT4:
    Here, the function foo tries to do some bounds checking with the local variable len. If we can overflow the buffer, we can also overflow the value of len and i (index of the for look in foo()). That way, we can manipulate the attacked buffer to overwrite the return address.
